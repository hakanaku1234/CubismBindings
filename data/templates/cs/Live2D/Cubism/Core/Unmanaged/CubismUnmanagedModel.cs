/*
 * Copyright(c) Live2D Inc. All rights reserved.
 * 
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

/* {{{autogeneratedwarning}}} */


using System;
using System.Runtime.InteropServices;


namespace Live2D.Cubism.Core.Unmanaged
{
    /// <summary>
    /// Unmanaged model.
    /// </summary>
    public sealed class CubismUnmanagedModel
    {
        #region Factory Methods

        /// <summary>
        /// Instantiates <see cref="CubismUnmanagedMoc"/>.
        /// </summary>
        /// <param name="moc">Moc.</param>
        /// <returns>Instance on success; <see langword="null"/> otherwise.</returns>
        public static CubismUnmanagedModel FromMoc(CubismUnmanagedMoc moc)
        {
            if (moc == null)
            {
                return null;
            }


            var model = new CubismUnmanagedModel(moc);


            return (model.Ptr != IntPtr.Zero)
                ? model
                : null;
        }

        #endregion

        /// <summary>
        /// Unmanaged parameters.
        /// </summary>
        public CubismUnmanagedParameters Parameters { get; private set; }
        
        /// <summary>
        /// Unmanaged parts.
        /// </summary>
        public CubismUnmanagedParts Parts { get; private set; }

        /// <summary>
        /// Unmanaged drawables.
        /// </summary>
        public CubismUnmanagedDrawables Drawables { get; private set; }

        /// <summary>
        /// Unmanaged canvas information(size, origin, ppu).
        /// </summary>
        public CubismUnmanagedCanvasInfo CanvasInfo { get; private set; }

        /// <summary>
        /// Native model pointer.
        /// </summary>
        public IntPtr Ptr { get; private set; }


        /// <summary>
        /// Updates instance.
        /// </summary>
        public void Update()
        {
            if (Ptr == IntPtr.Zero)
            {
                return;
            }


            CubismCoreDll.UpdateModel(Ptr);
        }

        /// <summary>
        /// Releases instance.
        /// </summary>
        public void Release()
        {
            if (Ptr == IntPtr.Zero)
            {
                return;
            }


            CubismUnmanagedMemory.Deallocate(Ptr);


            Ptr = IntPtr.Zero;
        }

        #region Ctors

        /// <summary>
        /// Initializes instance.
        /// </summary>
        /// <param name="moc">Moc.</param>
        private CubismUnmanagedModel(CubismUnmanagedMoc moc)
        {
            // Allocate and initialize memory (returning on fail).
            var size = CubismCoreDll.GetSizeofModel(moc.Ptr);
            var memory = CubismUnmanagedMemory.Allocate((int)size, CubismCoreDll.AlignofModel);


            if (memory == IntPtr.Zero)
            {
                return;
            }


            // Initialize native model (cleaning up and returning on fail).
            Ptr = CubismCoreDll.InitializeModelInPlace(moc.Ptr, memory, size);


            if (Ptr == IntPtr.Zero)
            {
                CubismUnmanagedMemory.Deallocate(memory);


                return;
            }


            // Initialize 'components'.
            Parameters = new CubismUnmanagedParameters(Ptr);
            Parts = new CubismUnmanagedParts(Ptr);
            Drawables = new CubismUnmanagedDrawables(Ptr);
            CanvasInfo = new CubismUnmanagedCanvasInfo(Ptr);
        }

        #endregion
    }


    /// <summary>
    /// Unmanaged canvas information interface.
    /// </sumamry>
    public sealed class CubismUnmanagedCanvasInfo
    {
        /// <summary>
        /// Width of native model canvas.
        /// </summary>
        public float CanvasWidth { get; private set; }

        /// <summary>
        /// Height of native model canvas.
        /// </summary>
        public float CanvasHeight { get; private set; }

        /// <summary>
        /// Coordinate origin of X axis.
        /// </summary>
        public float CanvasOriginX { get; private set; }

        /// <summary>
        /// Coordinate origin of Y axis.
        /// </summary>
        public float CanvasOriginY { get; private set; }

        /// <summary>
        /// Pixels per unit of native model.
        /// </summary>
        public float PixelsPerUnit { get; private set; }
        
        #region Ctors
        
        /// <summary>
        /// Initializes instance.
        /// </summary>
        /// <param name="modelPtr"> Native model pointer. </param>
        internal unsafe CubismUnmanagedCanvasInfo(IntPtr modelPtr)
        {
            if (modelPtr == IntPtr.Zero)
            {
                return;
            }

            float[] _sizeXY = new float[2];
            float[] _originXY = new float[2];
            float[] _ppu = new float[1];

            IntPtr size_ptr = Marshal.AllocCoTaskMem(Marshal.SizeOf(typeof(float)) * 2);
            IntPtr origin_ptr = Marshal.AllocCoTaskMem(Marshal.SizeOf(typeof(float)) * 2);
            IntPtr ppu_ptr = Marshal.AllocCoTaskMem(Marshal.SizeOf(typeof(float)) * 1);

            CubismCoreDll.ReadCanvasInfo(modelPtr, size_ptr, origin_ptr, ppu_ptr);

            Marshal.Copy(size_ptr, _sizeXY, 0, 2);
            Marshal.Copy(origin_ptr, _originXY, 0, 2);
            Marshal.Copy(ppu_ptr, _ppu, 0, 1);

            Marshal.FreeCoTaskMem(size_ptr);
            Marshal.FreeCoTaskMem(origin_ptr);
            Marshal.FreeCoTaskMem(ppu_ptr);

            CanvasWidth = _sizeXY[0];
            CanvasHeight = _sizeXY[1];
            CanvasOriginX = _originXY[0];
            CanvasOriginY = _originXY[1];
            PixelsPerUnit = _ppu[0];
        }

        #endregion

    }
}
